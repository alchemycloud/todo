todo project[
    url www.todo.com
    namespace com.todo
    version 1 . 0 . 0 . 0
    environments prod
    developer(dvesin, nmilinkovic, olahnikola, bgvoka, profesor)
](

    backend server[
        owners(dvesin)
        template java-springboot(tests fabut)
        security(
            principal User
            role UserRole
            type username
            defaultRole ADMIN
            adminRole MEMBER
            signIn[
                query User.findById
            ]
        )
        path /
        default model type mysql
        connectedTo
    ](

        AuthenticationApi api(

            SignInResponse dto(
                accessToken text[min 64, max 4096, sensitive]
                refreshToken text[min 64, max 4096, sensitive]
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
            )

            refreshToken refreshtoken[
                request AuthenticationApi.RefreshTokenRequest
                post /refresh-token
                query User.findById
                response AuthenticationApi.SignInResponse
                errors
                test refreshToken
                model User
            ]

            signUp signup[
                post /sign-up
                model User
                request AuthenticationApi.SignUpRequest
                errors
                test signUp
            ]

            signIn signIn[
                request AuthenticationApi.SignInRequest
                post /sign-in
                query User.findById
                response AuthenticationApi.SignInResponse
                errors
                test signIn
                model User
            ]

            changePassword changepassword[
                request AuthenticationApi.ChangePasswordRequest
                secured
                post /change-password
                model User
                errors
                test changePassword
            ]

            RefreshTokenRequest dto(
                refreshToken text[min 64, max 4096, sensitive]
            )

            SignUpRequest dto(
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                username text[min 3, max 128]
                password text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
            )

            SignInRequest dto(
                username text[min 3, max 128]
                password text[min 6, max 255, sensitive]
            )

            ChangePasswordRequest dto(
                oldPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
                newPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
            )
        )

        UserRole enum(
            ADMIN ADMIN
            MEMBER MEMBER
        )

        Status enum(
            NOT_STARTED NOT_STARTED
            IN_PROGRESS IN_PROGRESS
            DONE DONE
        )

        USER_NOT_FOUND badRequest

        User model[type mysql, unique(username)](
            id integer[primarykey, max 9223372036854775807]
            firstName text[min 1, max 40, searchable]
            lastName text[min 1, max 60]
            role UserRole
            username text[unique, min 3, max 128]
            passwordHash text[min 6, max 128, sensitive]
            findAll select(User) from User as User
                 order by User.id asc
            countAll count
                 from User as User
            findById select(User) from User as User
                 where User.id == id
                 order by User.id asc
            deleteById delete
                 from User as User
                 where User.id == id
            findByFirstName select(User) from User as User
                 where User.firstName == firstName
                 order by User.id asc
            findByLastName select(User) from User as User
                 where User.lastName == lastName
                 order by User.id asc
            findByRole select(User) from User as User
                 where User.role == role
                 order by User.id asc
            findByUsername select(User) from User as User
                 where User.username == username
                 order by User.id asc
            findByPasswordHash select(User) from User as User
                 where User.passwordHash == passwordHash
                 order by User.id asc
            users select(User) from User as User
                 order by User.id asc
        )

        Todo model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            user User[manyToOne todo]
            task text[min 1, max 255]
            date date
            status Status
            findAll select(Todo) from Todo as Todo
                 order by Todo.id asc
            countAll count
                 from Todo as Todo
            findById select(Todo) from Todo as Todo
                 where Todo.id == id
                 order by Todo.id asc
            deleteById delete
                 from Todo as Todo
                 where Todo.id == id
            findByTask select(Todo) from Todo as Todo
                 where Todo.task == task
                 order by Todo.id asc
            findByDate select(Todo) from Todo as Todo
                 where Todo.date == date
                 order by Todo.id asc
            findByStatus select(Todo) from Todo as Todo
                 where Todo.status == status
                 order by Todo.id asc
            userTodos select(Todo) from Todo as Todo
                 where Todo.user.id == userId
                 orderable by Todo.task
            todos select(Todo, User) from Todo as Todo
                 join User as User with Todo on Todo.user
                 order by Todo.id asc
        )

        UserApi api(

            readUser read[
                secured ADMIN
                get /user/:id
                model User
                query User.findById
                errors
                test readUser
                request UserApi.ReadUserRequest
                response UserApi.ReadUserResponse
            ]

            createUser create[
                secured ADMIN
                post /user
                model User
                query User.findById
                errors
                test createUser
                request UserApi.CreateUserRequest
                response UserApi.CreateUserResponse
            ]

            updateUser update[
                secured ADMIN
                put /user/:id
                model User
                query User.findById
                errors
                test updateUser
                request UserApi.UpdateUserRequest
                response UserApi.UpdateUserResponse
            ]

            deleteUser delete[
                secured ADMIN
                delete /user/:id
                query User.findById
                errors
                test deleteUser
                model User
                request UserApi.DeleteUserRequest
            ]

            users read[
                query User.users
                get /users
                secured ADMIN
                errors
                test users
                model User
                response list UserApi.UsersResponse
            ]

            userTodos read[
                query Todo.userTodos
                get /user-todos
                secured ADMIN
                errors
                test userTodos
                model Todo
                request UserApi.UserTodosRequest
                response list UserApi.UserTodosResponse
            ]

            ReadUserRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            CreateUserRequest dto(
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            CreateUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            UpdateUserRequest dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            UpdateUserResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            DeleteUserRequest dto(
                id integer[max 9223372036854775807]
            )

            UsersResponse dto(
                id integer[max 9223372036854775807]
                firstName text[min 1, max 40]
                lastName text[min 1, max 60]
                role UserRole
                username text[min 3, max 128]
                passwordHash text[min 6, max 128, sensitive]
            )

            UserTodosRequest dto(
                userId integer[max 9223372036854775807]
                fields list TodoUserTodosSortField
                directions list SortOrder
            )

            UserTodosResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )
        )

        TodoApi api(

            readTodo read[
                get /todo/:id
                model Todo
                query Todo.findById
                errors
                test readTodo
                request TodoApi.ReadTodoRequest
                response TodoApi.ReadTodoResponse
            ]

            createTodo create[
                post /todo
                model Todo
                query Todo.findById
                errors
                test createTodo
                request TodoApi.CreateTodoRequest
                response TodoApi.CreateTodoResponse
            ]

            updateTodo update[
                put /todo/:id
                model Todo
                query Todo.findById
                errors
                test updateTodo
                request TodoApi.UpdateTodoRequest
                response TodoApi.UpdateTodoResponse
            ]

            deleteTodo delete[
                delete /todo/:id
                query Todo.findById
                errors
                test deleteTodo
                model Todo
                request TodoApi.DeleteTodoRequest
            ]

            todos read[
                query Todo.todos
                response list TodoApi.TodosResponse
                get /todos
                secured(ADMIN, MEMBER)
                errors
                test todos
                model Todo
            ]

            ReadTodoRequest dto(
                id integer[max 9223372036854775807]
            )

            ReadTodoResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )

            CreateTodoRequest dto(
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )

            CreateTodoResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )

            UpdateTodoRequest dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )

            UpdateTodoResponse dto(
                id integer[max 9223372036854775807]
                userId integer[max 9223372036854775807]
                task text[min 1, max 255]
                date date
                status Status
            )

            DeleteTodoRequest dto(
                id integer[max 9223372036854775807]
            )

            TodosResponse dto(
                id integer[max 9223372036854775807]
                userUsername text[min 3, max 128]
                task text[min 1, max 255]
                date date
                status Status
            )
        )

        accessTokenValidityInSeconds integer[production 300, test 300]

        refreshTokenValidityInSeconds integer[production 3600, test 3600]

        accessTokenIsExpired unauthorized

        refreshTokenIsExpired unauthorized

        insufficientRights unauthorized

        credentialsAreInvalid badRequest

        usernameAlreadyInUser badRequest

        DataVersion model[type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            time datetime
            lock boolean
            lockTime datetime
            findAll select(DataVersion) from DataVersion as DataVersion
                 order by DataVersion.id asc
            countAll count
                 from DataVersion as DataVersion
            findById select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.id == id
                 order by DataVersion.id asc
            deleteById delete
                 from DataVersion as DataVersion
                 where DataVersion.id == id
            findByMajor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.major == major
                 order by DataVersion.id asc
            findByMinor select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.minor == minor
                 order by DataVersion.id asc
            findByRevision select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.revision == revision
                 order by DataVersion.id asc
            findByNumber select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.number == number
                 order by DataVersion.id asc
            findByTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.time == time
                 order by DataVersion.id asc
            findByLock select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lock == lock
                 order by DataVersion.id asc
            findByLockTime select(DataVersion) from DataVersion as DataVersion
                 where DataVersion.lockTime == lockTime
                 order by DataVersion.id asc
        )

        DataProcessorLog model[unique(major, minor, revision, number), type mysql](
            id integer[primarykey, max 9223372036854775807]
            major integer[min 0]
            minor integer[min 0]
            revision integer[min 0]
            number integer[min 0]
            description text[min 0, max 255]
            started datetime
            completed optional datetime
            findAll select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 order by DataProcessorLog.id asc
            countAll count
                 from DataProcessorLog as DataProcessorLog
            findById select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
                 order by DataProcessorLog.id asc
            deleteById delete
                 from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.id == id
            findByMajor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major
                 order by DataProcessorLog.id asc
            findByMinor select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.minor == minor
                 order by DataProcessorLog.id asc
            findByRevision select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.revision == revision
                 order by DataProcessorLog.id asc
            findByNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
            findByDescription select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.description == description
                 order by DataProcessorLog.id asc
            findByStarted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.started == started
                 order by DataProcessorLog.id asc
            findByCompleted select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByCompletedMandatory select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where mandatory DataProcessorLog.completed == completed
                 order by DataProcessorLog.id asc
            findByMajorAndMinorAndRevisionAndNumber select(DataProcessorLog) from DataProcessorLog as DataProcessorLog
                 where DataProcessorLog.major == major and DataProcessorLog.minor == minor and DataProcessorLog.revision == revision and DataProcessorLog.number == number
                 order by DataProcessorLog.id asc
        )

        TodoUserTodosSortField enum(
            TODO_TASK todo.task
        )

        SortOrder enum(
            ASC asc
            DESC desc
        )
    )

    webapp client[
        owners(dvesin)
        connectedTo(
            backend.AuthenticationApi.refreshToken
            backend.AuthenticationApi.signUp
            backend.AuthenticationApi.signIn
            backend.AuthenticationApi.changePassword
            backend.UserApi.readUser
            backend.UserApi.createUser
            backend.UserApi.updateUser
            backend.UserApi.deleteUser
            backend.UserApi.users
            backend.UserApi.userTodos
            backend.TodoApi.readTodo
            backend.TodoApi.createTodo
            backend.TodoApi.updateTodo
            backend.TodoApi.deleteTodo
            backend.TodoApi.todos
        )
        template js-angular7
        path /webportal
        home(
            todosPage(ADMIN, MEMBER)
            signInPage
        )
        i18n en
    ](

        usersPage page[
            path /users
            secured ADMIN
            params
            model
        ](
            addUser button {
                on click open createUser(none) {
                    on closed do users.load
                }
            }
            users users[input] {
                on ViewTodos do userTodos.reload(event . id, none, none)
            }
            userTodos userTodos[input(*, *, *)]
        ) {
            init action
        }

        createUser form[
            submit UserApi.createUser[type manual]
            params(model optional dto(
                    firstName text[min 1, max 40]
                    lastName text[min 1, max 60]
                    role backend.UserRole
                    username text[min 3, max 128]
                    passwordHash text[min 6, max 128, sensitive]
                ))
            model(firstName text[min 1, max 40], lastName text[min 1, max 60], role backend.UserRole, username text[min 3, max 128], passwordHash text[min 6, max 128, sensitive])
            invisible
            visible(firstName, lastName, role, username, passwordHash)
        ](
            firstName text[input model . firstName, min 1, max 40]
            lastName text[input model . lastName, min 1, max 60]
            role UserRoleDropDown[input model . role]
            username text[input model . username, min 3, max 128]
            passwordHash text[input model . passwordHash, min 6, max 128, sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action
            submit action call backend.UserApi.createUser(model . firstName, model . lastName, model . role, model . username, model . passwordHash) {
                on success close
            }
            closed event
            close action fire createUser.closed
        }

        editUser form[
            load UserApi.readUser
            submit UserApi.updateUser[type manual]
            params(id integer[max 9223372036854775807])
            model(id integer[max 9223372036854775807], firstName text[min 1, max 40], lastName text[min 1, max 60], role backend.UserRole, username text[min 3, max 128],
                    passwordHash text[min 6, max 128, sensitive])
            invisible(id)
            visible(firstName, lastName, role, username, passwordHash)
        ](
            firstName text[input model . firstName, min 1, max 40]
            lastName text[input model . lastName, min 1, max 60]
            role UserRoleDropDown[input model . role]
            username text[input model . username, min 3, max 128]
            passwordHash text[input model . passwordHash, min 6, max 128, sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action do load
            submit action call backend.UserApi.updateUser(model . id, model . firstName, model . lastName, model . role, model . username,
                    model . passwordHash) {
                on success close
            }
            load action call backend.UserApi.readUser(params . id) {
                on success {
                    model.id = success.id
                    model.firstName = success.firstName
                    model.lastName = success.lastName
                    model.role = success.role
                    model.username = success.username
                    model.passwordHash = success.passwordHash
                }
            }
            reload action(id integer[max 9223372036854775807]) {
                params.id = action.id
                do load
            }
            closed event
            close action fire editUser.closed
        }

        deleteUser form[
            load UserApi.readUser
            submit UserApi.deleteUser[type manual]
            params(id integer[max 9223372036854775807])
            model(id integer[max 9223372036854775807], firstName text[min 1, max 40], lastName text[min 1, max 60], role backend.UserRole, username text[min 3, max 128],
                    passwordHash text[min 6, max 128, sensitive])
            invisible(id)
            visible(firstName, lastName, role, username, passwordHash)
        ](
            firstName text[input model . firstName, min 1, max 40]
            lastName text[input model . lastName, min 1, max 60]
            role UserRoleDropDown[input model . role]
            username text[input model . username, min 3, max 128]
            passwordHash text[input model . passwordHash, min 6, max 128, sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action do load
            submit action call backend.UserApi.deleteUser(model . id) {
                on success close
            }
            load action call backend.UserApi.readUser(params . id) {
                on success {
                    model.id = success.id
                    model.firstName = success.firstName
                    model.lastName = success.lastName
                    model.role = success.role
                    model.username = success.username
                    model.passwordHash = success.passwordHash
                }
            }
            reload action(id integer[max 9223372036854775807]) {
                params.id = action.id
                do load
            }
            closed event
            close action fire deleteUser.closed
        }

        todosPage page[
            path /todos
            secured(ADMIN, MEMBER)
            params
            model
        ](
            addTodo button {
                on click open createTodo(none) {
                    on closed do todos.load
                }
            }
            todos todos[input]
        ) {
            init action
        }

        createTodo form[
            submit TodoApi.createTodo[type manual]
            params(model optional dto(
                    userId integer[max 9223372036854775807]
                    task text[min 1, max 255]
                    date date
                    status backend.Status
                ))
            model(userId integer[max 9223372036854775807], task text[min 1, max 255], date date, status backend.Status)
            invisible
            visible(userId, task, date, status)
        ](
            userId integer[input model . userId, max 9223372036854775807]
            task text[input model . task, min 1, max 255]
            date date[input model . date]
            status StatusDropDown[input model . status]
            submit button {
                on click do submit
            }
        ) {
            init action
            submit action call backend.TodoApi.createTodo(model . userId, model . task, model . date, model . status) {
                on success close
            }
            closed event
            close action fire createTodo.closed
        }

        editTodo form[
            load TodoApi.readTodo
            submit TodoApi.updateTodo[type manual]
            params(id integer[max 9223372036854775807])
            model(id integer[max 9223372036854775807], userId integer[max 9223372036854775807], task text[min 1, max 255], date date, status backend.Status)
            invisible(id)
            visible(userId, task, date, status)
        ](
            userId integer[input model . userId, max 9223372036854775807]
            task text[input model . task, min 1, max 255]
            date date[input model . date]
            status StatusDropDown[input model . status]
            submit button {
                on click do submit
            }
        ) {
            init action do load
            submit action call backend.TodoApi.updateTodo(model . id, model . userId, model . task, model . date, model . status) {
                on success close
            }
            load action call backend.TodoApi.readTodo(params . id) {
                on success {
                    model.id = success.id
                    model.userId = success.userId
                    model.task = success.task
                    model.date = success.date
                    model.status = success.status
                }
            }
            reload action(id integer[max 9223372036854775807]) {
                params.id = action.id
                do load
            }
            closed event
            close action fire editTodo.closed
        }

        deleteTodo form[
            load TodoApi.readTodo
            submit TodoApi.deleteTodo[type manual]
            params(id integer[max 9223372036854775807])
            model(id integer[max 9223372036854775807], userId integer[max 9223372036854775807], task text[min 1, max 255], date date, status backend.Status)
            invisible(id)
            visible(userId, task, date, status)
        ](
            userId integer[input model . userId, max 9223372036854775807]
            task text[input model . task, min 1, max 255]
            date date[input model . date]
            status StatusDropDown[input model . status]
            submit button {
                on click do submit
            }
        ) {
            init action do load
            submit action call backend.TodoApi.deleteTodo(model . id) {
                on success close
            }
            load action call backend.TodoApi.readTodo(params . id) {
                on success {
                    model.id = success.id
                    model.userId = success.userId
                    model.task = success.task
                    model.date = success.date
                    model.status = success.status
                }
            }
            reload action(id integer[max 9223372036854775807]) {
                params.id = action.id
                do load
            }
            closed event
            close action fire deleteTodo.closed
        }

        signInPage page[
            path /sign-in
            params
            model
        ](
            signInForm signInForm[input none]
            signUp link[goto signUpPage]
        ) {
            init action
        }

        signUpPage page[
            path /sign-up
            params
            model
        ](
            signUpForm signUpForm[input none]
            signIn link[goto signInPage]
        ) {
            init action
        }

        changePasswordForm form[
            submit backend.AuthenticationApi.changePassword[type manual]
            params(model optional dto(
                    oldPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
                    newPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
                ))
            model(oldPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive], newPassword text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive])
            invisible
            visible(oldPassword, newPassword)
        ](
            oldPassword text[input model . oldPassword, min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
            newPassword text[input model . newPassword, min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action
            submit action call backend.AuthenticationApi.changePassword(model . oldPassword, model . newPassword) {
                on success goto signInPage
            }
        }

        users table[
            load UserApi.users
            params
            model(id integer[max 9223372036854775807], firstName text[min 1, max 40], lastName text[min 1, max 60], role backend.UserRole, username text[min 3, max 128],
                    passwordHash text[min 6, max 128, sensitive])
            visible(id, firstName, lastName, role, username,
                    passwordHash)
        ](
            id integer[input item . id, max 9223372036854775807]
            firstName text[input item . firstName, min 1, max 40]
            lastName text[input item . lastName, min 1, max 60]
            role label[input item . role]
            username text[input item . username, min 3, max 128]
            passwordHash text[input item . passwordHash, min 6, max 128, sensitive]
            viewUserTodos button {
                on click fire ViewTodos(item . id)
            }
            editUser button {
                on click open editUser(item . id)
            }
            deleteUser button {
                on click open deleteUser(item . id)
            }
        ) {
            init action do load
            ViewTodos event(id integer)
            load action call backend.UserApi.users {
                on success list assign(
                    model.id = success.id
                    model.firstName = success.firstName
                    model.lastName = success.lastName
                    model.role = success.role
                    model.username = success.username
                    model.passwordHash = success.passwordHash
                )
            }
            selected event(itemId integer[max 9223372036854775807])
            select action(selectedId integer[max 9223372036854775807]) fire users.selected(action . selectedId)
        }

        userTodos table[
            load UserApi.userTodos
            params(userId integer[max 9223372036854775807], fields list backend.TodoUserTodosSortField, directions list backend.SortOrder)
            model(id integer[max 9223372036854775807], userId integer[max 9223372036854775807], task text[min 1, max 255], date date, status backend.Status)
            sortable[enum backend.TodoUserTodosSortField](Todo.task)
            visible(id, userId, task, date, status)
        ](
            id integer[input item . id, max 9223372036854775807]
            userId integer[input item . userId, max 9223372036854775807]
            task text[input item . task, min 1, max 255]
            date date[input item . date]
            status label[input item . status]
        ) {
            init action do load
            load action call backend.UserApi.userTodos(params . userId, params . fields, params . directions) {
                on success list assign(
                    model.id = success.id
                    model.userId = success.userId
                    model.task = success.task
                    model.date = success.date
                    model.status = success.status
                )
            }
            reload action(userId integer[max 9223372036854775807], fields list backend.TodoUserTodosSortField, directions list backend.SortOrder) {
                params.userId = action.userId
                params.fields = action.fields
                params.directions = action.directions
                do load
            }
            selected event(itemId integer[max 9223372036854775807])
            select action(selectedId integer[max 9223372036854775807]) fire userTodos.selected(action . selectedId)
        }

        todos table[
            load TodoApi.todos
            params
            model(id integer[max 9223372036854775807], userUsername text[min 3, max 128], task text[min 1, max 255], date date, status backend.Status)
            visible(id, userUsername, task, date, status)
        ](
            id integer[input item . id, max 9223372036854775807]
            userUsername text[input item . userUsername, min 3, max 128]
            task text[input item . task, min 1, max 255]
            date date[input item . date]
            status label[input item . status]
            editTodo button {
                on click open editTodo(item . id)
            }
            deleteTodo button {
                on click open deleteTodo(item . id)
            }
        ) {
            init action do load
            load action call backend.TodoApi.todos {
                on success list assign(
                    model.id = success.id
                    model.userUsername = success.userUsername
                    model.task = success.task
                    model.date = success.date
                    model.status = success.status
                )
            }
            selected event(itemId integer[max 9223372036854775807])
            select action(selectedId integer[max 9223372036854775807]) fire todos.selected(action . selectedId)
        }

        signInForm form[
            submit backend.AuthenticationApi.signIn[type manual]
            params(model optional dto(
                    username text[min 3, max 128]
                    password text[min 6, max 255, sensitive]
                ))
            model(username text[min 3, max 128], password text[min 6, max 255, sensitive])
            invisible
            visible(username, password)
        ](
            username text[input model . username, min 3, max 128]
            password text[input model . password, min 6, max 255, sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action
            submit action call backend.AuthenticationApi.signIn(model . username, model . password) {
                on success if success . role == backend.UserRole.ADMIN or success . role == backend.UserRole.MEMBER goto todosPage
            }
        }

        signUpForm form[
            submit backend.AuthenticationApi.signUp[type manual]
            params(model optional dto(
                    firstName text[min 1, max 40]
                    lastName text[min 1, max 60]
                    username text[min 3, max 128]
                    password text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
                ))
            model(firstName text[min 1, max 40], lastName text[min 1, max 60], username text[min 3, max 128], password text[min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive])
            invisible
            visible(firstName, lastName, username, password)
        ](
            firstName text[input model . firstName, min 1, max 40]
            lastName text[input model . lastName, min 1, max 60]
            username text[input model . username, min 3, max 128]
            password text[input model . password, min 6, max 255, regex "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z*&@%+/_'!#$^?:.(\\)\\[\\]{}~\\-]{8,}$", sensitive]
            submit button {
                on click do submit
            }
        ) {
            init action
            submit action call backend.AuthenticationApi.signUp(model . firstName, model . lastName, model . username, model . password) {
                on success goto signInPage
            }
        }

        UserRoleDropDown dropdown[
            enum backend.UserRole
            params(selected optional backend.UserRole)
            model
            visible
        ] {
            init action
            selected event(item backend.UserRole)
            select action(item backend.UserRole) {
                params.selected = action.item
                fire UserRoleDropDown.selected(action . item)
            }
        }

        StatusDropDown dropdown[
            enum backend.Status
            params(selected optional backend.Status)
            model
            visible
        ] {
            init action
            selected event(item backend.Status)
            select action(item backend.Status) {
                params.selected = action.item
                fire StatusDropDown.selected(action . item)
            }
        }
    )
)